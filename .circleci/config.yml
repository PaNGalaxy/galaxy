# Python CircleCI 2.0 configuration file
version: 2
variables:
  restore_repo_cache: &restore_repo_cache
    restore_cache:
      keys:
        - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
  restore_yarn_cache: &restore_yarn_cache
    restore_cache:
      keys:
        - v1-repo-{{ .Environment.CIRCLE_SHA1 }}
        - yarn-packages-{{ checksum "client/yarn.lock" }}
  save_yarn_cache: &save_yarn_cache
    save_cache:
      key: yarn-packages-{{ checksum "client/yarn.lock" }}
      paths:
        - ~/.cache/yarn
  install_tox: &install_tox
    run: sudo pip install tox
  install_deb_reqs: &install_deb_reqs
    run: sudo apt-get update && sudo apt-get install ffmpeg nodejs -y
  set_workdir: &set_workdir
    working_directory: ~/repo
  requires_get_code: &requires_get_code
    requires:
      - get_code
jobs:
  get_code:
    docker:
      - image: circleci/python:3.7
    <<: *set_workdir
    steps:
      # Replace standard code checkout with shallow clone to speed things up.
      - run:
          name: Checkout code
          command: |-
              # Add github.com to known hosts
              mkdir -p ~/.ssh
              echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
              ' >> ~/.ssh/known_hosts

              # Add the user ssh key and set correct perms
              (umask 077; touch ~/.ssh/id_rsa)
              chmod 0600 ~/.ssh/id_rsa
              echo "$CHECKOUT_KEY" > ~/.ssh/id_rsa

              # Use git+ssh instead of https
              git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
              git config --global gc.auto 0 || true

              # Shallow clone
              git clone --depth=1 "${CIRCLE_REPOSITORY_URL}" .

              if [[ -n "${CIRCLE_PR_NUMBER}" ]]; then
                  # Update PR refs for testing.
                  FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/head:pr/${CIRCLE_PR_NUMBER}/head"
                  FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/merge:pr/${CIRCLE_PR_NUMBER}/merge"

                  # Retrieve the refs
                  git fetch --force origin ${FETCH_REFS}

                  # Checkout PR merge ref.
                  git checkout -f "pr/${CIRCLE_PR_NUMBER}/merge"

                  # Test for *some* merge conflicts.
                  git branch --merged | grep "pr/${CIRCLE_PR_NUMBER}/head" > /dev/null
              else
                  if [ -n "$CIRCLE_TAG" ]; then
                      git fetch --depth=1 --force origin "refs/tags/${CIRCLE_TAG}"
                  else
                      git fetch --depth=1 --force origin "$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH"
                  fi
                  if [ -n "$CIRCLE_TAG" ]; then
                      git reset --hard "$CIRCLE_SHA1"
                      git checkout "$CIRCLE_TAG"
                  elif [ -n "$CIRCLE_BRANCH" ]; then
                      git reset --hard "$CIRCLE_SHA1"
                      git checkout -B "$CIRCLE_BRANCH"
                  fi
                  git reset --hard "${CIRCLE_SHA1}"
              fi
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo
  validate_test_tools:
    docker:
      - image: circleci/python:3.7
    <<: *set_workdir
    steps:
      - *restore_repo_cache
      - run: sudo apt-get update
      - run: sudo apt-get install -y libxml2-utils
      - *install_tox
      - run: tox -e validate_test_tools
  test_galaxy_packages:
    docker:
      - image: circleci/python:3.7
    <<: *set_workdir
    steps:
      - *restore_repo_cache
      - *install_tox
      - *install_deb_reqs
      - run: tox -e test_galaxy_packages
  js_lint:
    docker:
      - image: cimg/node:14.15
    <<: *set_workdir
    steps:
      - *restore_yarn_cache
      - run: cd client && yarn install --frozen-lockfile
      - *save_yarn_cache
      - run: cd client && yarn run eslint
      - run: cd client && yarn run prettier-check
workflows:
  version: 2
  get_code_and_test:
    jobs:
      - get_code
      - test_galaxy_packages:
          <<: *requires_get_code
      - validate_test_tools:
          <<: *requires_get_code
      - js_lint:
          <<: *requires_get_code
