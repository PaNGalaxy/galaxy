# generated by datamodel-codegen:
#   filename:  https://raw.githubusercontent.com/ga4gh/data-repository-service-schemas/master/openapi/components/schemas/AccessMethod.yaml
#   timestamp: 2022-05-21T22:19:06+00:00

from __future__ import annotations

from enum import Enum
from typing import (
    List,
    Optional,
)

from pydantic import (
    BaseModel,
    Field,
)


class Type(Enum):
    s3 = "s3"
    gs = "gs"
    ftp = "ftp"
    gsiftp = "gsiftp"
    globus = "globus"
    htsget = "htsget"
    https = "https"
    file = "file"


class AccessURL(BaseModel):
    url: str = Field(..., description="A fully resolvable URL that can be used to fetch the actual object bytes.")
    headers: Optional[List[str]] = Field(
        None,
        description="An optional list of headers to include in the HTTP request to `url`. These headers can be used to provide auth tokens required to fetch the object bytes.",
        example="Authorization: Basic Z2E0Z2g6ZHJz",
    )


class Model(BaseModel):
    type: Type = Field(..., description="Type of the access method.")
    access_url: Optional[AccessURL] = Field(
        None,
        description="An `AccessURL` that can be used to fetch the actual object bytes. Note that at least one of `access_url` and `access_id` must be provided.",
    )
    access_id: Optional[str] = Field(
        None,
        description="An arbitrary string to be passed to the `/access` method to get an `AccessURL`. This string must be unique within the scope of a single object. Note that at least one of `access_url` and `access_id` must be provided.",
    )
    region: Optional[str] = Field(
        None,
        description="Name of the region in the cloud service provider that the object belongs to.",
        example="us-east-1",
    )

    # This file is autogenerated but @jmchilton needed to add this manually.
    class Config:
        use_enum_values = True  # when using .dict()
